k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
# YOUR CODE HERE
#function that simulates one round of monty hall
#enter the chosen door and if switch TRUE or FALSE for the round
monty_hall_choice <- function(choice1, switch)
{
monty_doors <- sample(c("goat", "goat", "car"))  # random placement of the car and goats
available_doors <- setdiff(1:3, choice1) # not chosen doors
#choose door among the 2 available doors
a <-sample(available_doors,1)
b <- monty_doors[a]
# if chosen door is goat, opens, if not opens the other
monty_opens <- ifelse(b=="goat", a, setdiff(1:3,c(choice1,a)))
if (switch) # finds the closed door that was not the 1st chosen and replaces it
{
free_door <- setdiff(1:3, c(choice1, monty_opens))
choice2 <- free_door
}
else {choice2 <- choice1}
# tests if contestant_2nd_choice=car and returns true or false
return(monty_doors[choice2] == "car")
}
# ====================================================================
#function to run tests 10 on monty_hall_choice()
test_monty_hall <- function(n)
{
choice1 <- sample(1:3, n, TRUE) #creates random vector w/ chosen door for the n tests
with_switch <- c() #creates empty vector to summarize n tests w/ switch
without_switch <- c() #creates empty vector to summarize n tests w/out switch
for (i in choice1) #run function n times w/ and w/out switch
{
with_switch <- c(with_switch, monty_hall_choice(i, switch = TRUE))
without_switch <- c(without_switch, monty_hall_choice(i, switch = FALSE))
}
#summarize results in a table
return(results <- data.frame(choice1,with_switch,without_switch))
}
print('ANSWER:')
print(results_summary <- test_monty_hall(10))
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k_monty_hall_choice (2, FALSE, 10)
k=100
n=1
choice <- sample(1:k, n, TRUE)
for (i in choice)
{
with_switch <- c(with_switch, k_monty_hall_choice(i, switch = TRUE,k))
without_switch <- c(without_switch, k_monty_hall_choice(i, switch = FALSE, k))
}
results <- data.frame(choice1,with_switch,without_switch)
k=100
n=4
choice <- sample(1:k, n, TRUE)
with_switch <- c()
without_switch <- c()
k_monty_hall_choice(i, TRUE,k)
with_switch <- c(with_switch, k_monty_hall_choice(i, TRUE,k))
with_switch <- c(with_switch, k_monty_hall_choice(i, TRUE,k))
with_switch <- c(with_switch, k_monty_hall_choice(i, TRUE,k))
with_switch <- c(with_switch, k_monty_hall_choice(i, TRUE,k))
with_switch <- c(with_switch, k_monty_hall_choice(i, TRUE,k))
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)=NULL, FALSE,k_monty_hall_choice(i, TRUE,k))
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)=NULL, FALSE,k_monty_hall_choice(i, TRUE,k))
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE,k_monty_hall_choice(i, TRUE,k))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k))
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE,k_monty_hall_choice(i, TRUE,k))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k))
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE,k_monty_hall_choice(i, TRUE,k))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k))
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE,k_monty_hall_choice(i, TRUE,k))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k))
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE,k_monty_hall_choice(i, TRUE,k))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k))
choice <- sample(1:k, n, TRUE)
with_switch <- c()
without_switch <- c()
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE,k_monty_hall_choice(i, TRUE,k))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k))
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE, k_monty_hall_choice(i, TRUE,k)))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k)))
}
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE, k_monty_hall_choice(i, TRUE,k)))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k)))
}
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE, k_monty_hall_choice(i, TRUE,k)))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k)))
}
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE, k_monty_hall_choice(i, TRUE,k)))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k)))
}
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE, k_monty_hall_choice(i, TRUE,k)))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k)))
}
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE, k_monty_hall_choice(i, TRUE,k)))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k)))
}
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE, k_monty_hall_choice(i, TRUE,k)))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k)))
}
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE, k_monty_hall_choice(i, TRUE,k)))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k)))
}
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE, k_monty_hall_choice(i, TRUE,k)))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k)))
}
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE, k_monty_hall_choice(i, TRUE,k)))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k)))
}
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE, k_monty_hall_choice(i, TRUE,k)))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k)))
}
results<-tryCatch(
{
monty_doors <- rep("goat", k) # creates goat vector
monty_doors [sample(1:k, 1)] <- "car" # random placement of the car
monty_opens <- NULL
available_doors <- c(1:k)
while(length(available_doors) >= 2)
{
available_doors<-setdiff(1:k,c(choice,monty_opens))# not chosen doors
a <-sample(available_doors,1)#choose door among the available doors
b <- monty_doors[a]
# if chosen door is goat, opens, if not opens the other
monty_opens <- ifelse(b=="goat", a, sample(1:k,sample(setdiff(1:k,c(choice,a)),1)))
if (switch) # finds the closed door that was not the 1st chosen and replaces it
{
choice <- sample(available_doors,1)
}
k=k-1
}
#tests if contestant_2nd_choice=car and returns true or false
return(monty_doors[choice] == "car")
},error = function(e) {return(NULL)})
k_monty_hall_simulation <- function(n, k)
{
choice <- sample(1:k, n, TRUE)
with_switch <- c()
without_switch <- c()
for (i in choice)
{
with_switch <- c(with_switch, ifelse(k_monty_hall_choice(i, TRUE,k)==NULL, FALSE, k_monty_hall_choice(i, TRUE,k)))
without_switch <- c(without_switch, ifelse(k_monty_hall_choice(i, FALSE,k)==NULL, FALSE,k_monty_hall_choice(i, FALSE,k)))
}
results <- data.frame(choice,with_switch,without_switch)
#proportion of win w/switch
p_with = (sum(results$with_switch)/n)
#proportion of win w/out switch
p_without = (sum(results$without_switch)/n)
return(c(p_with,p_without))
}
results<- k_monty_hall_simulation(10, 10)
k_monty_hall_choice <- function(choice, switch, k)
{
results<-tryCatch(
{
monty_doors <- rep("goat", k) # creates goat vector
monty_doors [sample(1:k, 1)] <- "car" # random placement of the car
monty_opens <- NULL
available_doors <- c(1:k)
while(length(available_doors) >= 2)
{
available_doors<-setdiff(1:k,c(choice,monty_opens))# not chosen doors
a <-sample(available_doors,1)#choose door among the available doors
b <- monty_doors[a]
# if chosen door is goat, opens, if not opens the other
monty_opens <- ifelse(b=="goat", a, sample(1:k,sample(setdiff(1:k,c(choice,a)),1)))
if (switch) # finds the closed door that was not the 1st chosen and replaces it
{
choice <- sample(available_doors,1)
}
k=k-1
}
#tests if contestant_2nd_choice=car and returns true or false
return(monty_doors[choice] == "car")
},error = function(e) {return(NULL)})
}
k_monty_hall_choice <- function(choice, switch, k)
{
results<-tryCatch(
{
monty_doors <- rep("goat", k) # creates goat vector
monty_doors [sample(1:k, 1)] <- "car" # random placement of the car
monty_opens <- NULL
available_doors <- c(1:k)
while(length(available_doors) >= 2)
{
available_doors<-setdiff(1:k,c(choice,monty_opens))# not chosen doors
a <-sample(available_doors,1)#choose door among the available doors
b <- monty_doors[a]
# if chosen door is goat, opens, if not opens the other
monty_opens <- ifelse(b=="goat", a, sample(1:k,sample(setdiff(1:k,c(choice,a)),1)))
if (switch) # finds the closed door that was not the 1st chosen and replaces it
{
choice <- sample(available_doors,1)
}
k=k-1
}
#tests if contestant_2nd_choice=car and returns true or false
return(monty_doors[choice] == "car")
},error = function(e) {return(NULL)})
}
k_monty_hall_simulation <- function(n, k)
{
choice <- sample(1:k, n, TRUE)
with_switch <- c()
without_switch <- c()
a<-NULL
b<-NULL
for (i in choice)
{
while (is.null(a)){a<-k_monty_hall_choice(i, TRUE,k)}
with_switch <- c(with_switch, k_monty_hall_choice(i, TRUE,k))
while (is.null(b)){a<-k_monty_hall_choice(i, FALSE,k)}
without_switch <- c(without_switch, k_monty_hall_choice(i, FALSE,k))
}
results <- data.frame(choice,with_switch,without_switch)
#proportion of win w/switch
p_with = (sum(results$with_switch)/n)
#proportion of win w/out switch
p_without = (sum(results$without_switch)/n)
return(c(p_with,p_without))
}
results<- k_monty_hall_simulation(10, 10)
k_monty_hall_choice <- function(3, switch, 10)
k_monty_hall_choice <- function(3, switch, 10)
k_monty_hall_choice <- function(3, switch, 10)
k_monty_hall_choice <- function(3, switch, 10)
k_monty_hall_choice <- function(3, switch, 10)
k_monty_hall_choice <- function(3, switch, 10)
k_monty_hall_choice <- function(3, switch, 10)
k_monty_hall_choice <- function(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice <- function(choice, switch, k)
{
results<-tryCatch(
{
monty_doors <- rep("goat", k) # creates goat vector
monty_doors [sample(1:k, 1)] <- "car" # random placement of the car
monty_opens <- NULL
available_doors <- c(1:k)
while(length(available_doors) >= 2)
{
available_doors<-setdiff(1:k,c(choice,monty_opens))# not chosen doors
a <-sample(available_doors,1)#choose door among the available doors
b <- monty_doors[a]
# if chosen door is goat, opens, if not opens the other
monty_opens <- ifelse(b=="goat", a, sample(1:k,sample(setdiff(1:k,c(choice,a)),1)))
if (switch) # finds the closed door that was not the 1st chosen and replaces it
{
choice <- sample(available_doors,1)
}
k=k-1
}
#tests if contestant_2nd_choice=car and returns true or false
return(monty_doors[choice] == "car")
},error = function(e) {return(NULL)})
return(results)
}
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
monty_doors <- rep("goat", k) # creates goat vector
monty_doors [sample(1:k, 1)] <- "car" # random placement of the car
monty_opens <- NULL
available_doors <- c(1:k)
while(length(available_doors) >= 2)
{
available_doors<-setdiff(1:k,c(choice,monty_opens))# not chosen doors
a <-sample(available_doors,1)#choose door among the available doors
b <- monty_doors[a]
# if chosen door is goat, opens, if not opens the other
monty_opens <- ifelse(b=="goat", a, sample(1:k,sample(setdiff(1:k,c(choice,a)),1)))
if (switch) # finds the closed door that was not the 1st chosen and replaces it
{
choice <- sample(available_doors,1)
}
k=k-1
}
k_monty_hall_choice <- function(choice, switch, k)
{
results<-tryCatch(
{
monty_doors <- rep("goat", k) # creates goat vector
monty_doors [sample(1:k, 1)] <- "car" # random placement of the car
monty_opens <- NULL
available_doors <- c(1:k)
while(length(available_doors) >= 2)
{
available_doors<-setdiff(1:k,c(choice,monty_opens))# not chosen doors
a <-sample(available_doors,1)#choose door among the available doors
b <- monty_doors[a]
# if chosen door is goat, opens, if not opens the other
monty_opens <- ifelse(b=="goat", a, sample(1:k,sample(setdiff(1:k,c(choice,a)),1)))
if (switch==TRUE) # finds the closed door that was not the 1st chosen and replaces it
{
choice <- sample(available_doors,1)
}
k=k-1
}
#tests if contestant_2nd_choice=car and returns true or false
return(monty_doors[choice] == "car")
},error = function(e) {return(NULL)})
return(results)
}
k_monty_hall_choice(3, switch, 10)
results<- k_monty_hall_simulation(10, 10)
k_monty_hall_choice <- function(choice, switch, k)
{
results<-tryCatch(
{
monty_doors <- rep("goat", k) # creates goat vector
monty_doors [sample(1:k, 1)] <- "car" # random placement of the car
monty_opens <- NULL
available_doors <- c(1:k)
while(length(available_doors) >= 2)
{
available_doors<-setdiff(1:k,c(choice,monty_opens))# not chosen doors
a <-sample(available_doors,1)#choose door among the available doors
b <- monty_doors[a]
# if chosen door is goat, opens, if not opens the other
monty_opens <- ifelse(b=="goat", a, sample(1:k,sample(setdiff(1:k,c(choice,a)),1)))
if (switch==TRUE) # finds the closed door that was not the 1st chosen and replaces it
{
choice <- sample(available_doors,1)
}
k=k-1
}
#tests if contestant_2nd_choice=car and returns true or false
return(monty_doors[choice] == "car")
},error = function(e) {return(NULL)})
return(results)
}
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
k_monty_hall_choice(3, switch, 10)
{
monty_doors <- rep("goat", k) # creates goat vector
monty_doors [sample(1:k, 1)] <- "car" # random placement of the car
monty_opens <- NULL
available_doors <- c(1:k)
while(length(available_doors) >= 2)
{
available_doors<-setdiff(1:k,c(choice,monty_opens))# not chosen doors
a <-sample(available_doors,1)#choose door among the available doors
b <- monty_doors[a]
# if chosen door is goat, opens, if not opens the other
monty_opens <- ifelse(b=="goat", a, sample(1:k,sample(setdiff(1:k,c(choice,a)),1)))
if (switch==TRUE) # finds the closed door that was not the 1st chosen and replaces it
{
choice <- sample(available_doors,1)
}
k=k-1
}
#tests if contestant_2nd_choice=car and returns true or false
return(monty_doors[choice] == "car")
choice=3
switch=TRUE
k=4
choice=3
switch=TRUE
k=4
monty_doors <- rep("goat", k) # creates goat vector
monty_doors [sample(1:k, 1)] <- "car" # random placement of the car
monty_opens <- NULL
available_doors <- c(1:k)
while(length(available_doors) >= 2)
{
available_doors<-setdiff(1:k,c(choice,monty_opens))# not chosen doors
a <-sample(available_doors,1)#choose door among the available doors
b <- monty_doors[a]
# if chosen door is goat, opens, if not opens the other
monty_opens <- ifelse(b=="goat", a, sample(1:k,sample(setdiff(1:k,c(choice,a)),1)))
if (switch==TRUE) # finds the closed door that was not the 1st chosen and replaces it
{
choice <- sample(available_doors,1)
}
k=k-1
}
install.packages("rmarkdown")
